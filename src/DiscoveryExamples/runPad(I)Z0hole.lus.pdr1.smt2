(set-option :produce-interpolants true)
(set-option :produce-unsat-cores true)
(set-option :simplify-interpolants true)
(set-logic QF_UFLIRA)
(set-option :verbosity 2)
(declare-fun $hole_0 () Bool)
(declare-fun $hole_1 () Bool)
(declare-fun $hole_2 () Bool)
(declare-fun $hole_3 () Bool)
(declare-fun $ok () Bool)
(declare-fun $sig0 () Int)
(declare-fun $out0 () Bool)
(declare-fun $Check_spec~0.ok () Bool)
(declare-fun $Check_spec~0.step () Int)
(declare-fun $Check_spec~0.stepOK () Bool)
(declare-fun $Check_spec~0.T_node~0.ok () Bool)
(declare-fun $Check_spec~0.T_node~0.start_bt () Bool)
(declare-fun $Check_spec~0.T_node~0.launch_bt () Bool)
(declare-fun $Check_spec~0.T_node~0.reset_flag () Bool)
(declare-fun $Check_spec~0.T_node~0.p1 () Bool)
(declare-fun $Check_spec~0.H_discovery~0.out () Bool)
(declare-fun $~flatten0 () Int)
(declare-fun $~flatten1 () Int)
(declare-fun $~flatten2 () Bool)
(declare-fun $~flatten3 () Bool)
(declare-fun %init () Bool)
(declare-fun %assertions () Bool)
(declare-fun $hole_0- () Bool)
(declare-fun $hole_1- () Bool)
(declare-fun $hole_2- () Bool)
(declare-fun $hole_3- () Bool)
(declare-fun $ok- () Bool)
(declare-fun $sig0- () Int)
(declare-fun $out0- () Bool)
(declare-fun $Check_spec~0.ok- () Bool)
(declare-fun $Check_spec~0.step- () Int)
(declare-fun $Check_spec~0.stepOK- () Bool)
(declare-fun $Check_spec~0.T_node~0.ok- () Bool)
(declare-fun $Check_spec~0.T_node~0.start_bt- () Bool)
(declare-fun $Check_spec~0.T_node~0.launch_bt- () Bool)
(declare-fun $Check_spec~0.T_node~0.reset_flag- () Bool)
(declare-fun $Check_spec~0.T_node~0.p1- () Bool)
(declare-fun $Check_spec~0.H_discovery~0.out- () Bool)
(declare-fun $~flatten0- () Int)
(declare-fun $~flatten1- () Int)
(declare-fun $~flatten2- () Bool)
(declare-fun $~flatten3- () Bool)
(declare-fun %init- () Bool)
(declare-fun %assertions- () Bool)
(declare-fun |$hole_0-'| () Bool)
(declare-fun |$hole_1-'| () Bool)
(declare-fun |$hole_2-'| () Bool)
(declare-fun |$hole_3-'| () Bool)
(declare-fun |$ok-'| () Bool)
(declare-fun |$sig0-'| () Int)
(declare-fun |$out0-'| () Bool)
(declare-fun |$Check_spec~0.ok-'| () Bool)
(declare-fun |$Check_spec~0.step-'| () Int)
(declare-fun |$Check_spec~0.stepOK-'| () Bool)
(declare-fun |$Check_spec~0.T_node~0.ok-'| () Bool)
(declare-fun |$Check_spec~0.T_node~0.start_bt-'| () Bool)
(declare-fun |$Check_spec~0.T_node~0.launch_bt-'| () Bool)
(declare-fun |$Check_spec~0.T_node~0.reset_flag-'| () Bool)
(declare-fun |$Check_spec~0.T_node~0.p1-'| () Bool)
(declare-fun |$Check_spec~0.H_discovery~0.out-'| () Bool)
(declare-fun |$~flatten0-'| () Int)
(declare-fun |$~flatten1-'| () Int)
(declare-fun |$~flatten2-'| () Bool)
(declare-fun |$~flatten3-'| () Bool)
(declare-fun |%init-'| () Bool)
(declare-fun |%assertions-'| () Bool)
(declare-fun |$hole_0'| () Bool)
(declare-fun |$hole_1'| () Bool)
(declare-fun |$hole_2'| () Bool)
(declare-fun |$hole_3'| () Bool)
(declare-fun |$ok'| () Bool)
(declare-fun |$sig0'| () Int)
(declare-fun |$out0'| () Bool)
(declare-fun |$Check_spec~0.ok'| () Bool)
(declare-fun |$Check_spec~0.step'| () Int)
(declare-fun |$Check_spec~0.stepOK'| () Bool)
(declare-fun |$Check_spec~0.T_node~0.ok'| () Bool)
(declare-fun |$Check_spec~0.T_node~0.start_bt'| () Bool)
(declare-fun |$Check_spec~0.T_node~0.launch_bt'| () Bool)
(declare-fun |$Check_spec~0.T_node~0.reset_flag'| () Bool)
(declare-fun |$Check_spec~0.T_node~0.p1'| () Bool)
(declare-fun |$Check_spec~0.H_discovery~0.out'| () Bool)
(declare-fun |$~flatten0'| () Int)
(declare-fun |$~flatten1'| () Int)
(declare-fun |$~flatten2'| () Bool)
(declare-fun |$~flatten3'| () Bool)
(declare-fun |%init'| () Bool)
(declare-fun |%assertions'| () Bool)
(define-fun T (($hole_0 Bool) ($hole_1 Bool) ($hole_2 Bool) ($hole_3 Bool) ($ok Bool) ($sig0 Int) ($out0 Bool) ($Check_spec~0.ok Bool) ($Check_spec~0.step Int) ($Check_spec~0.stepOK Bool) ($Check_spec~0.T_node~0.ok Bool) ($Check_spec~0.T_node~0.start_bt Bool) ($Check_spec~0.T_node~0.launch_bt Bool) ($Check_spec~0.T_node~0.reset_flag Bool) ($Check_spec~0.T_node~0.p1 Bool) ($Check_spec~0.H_discovery~0.out Bool) ($~flatten0 Int) ($~flatten1 Int) ($~flatten2 Bool) ($~flatten3 Bool) (%init Bool) (%assertions Bool) (|$hole_0'| Bool) (|$hole_1'| Bool) (|$hole_2'| Bool) (|$hole_3'| Bool) (|$ok'| Bool) (|$sig0'| Int) (|$out0'| Bool) (|$Check_spec~0.ok'| Bool) (|$Check_spec~0.step'| Int) (|$Check_spec~0.stepOK'| Bool) (|$Check_spec~0.T_node~0.ok'| Bool) (|$Check_spec~0.T_node~0.start_bt'| Bool) (|$Check_spec~0.T_node~0.launch_bt'| Bool) (|$Check_spec~0.T_node~0.reset_flag'| Bool) (|$Check_spec~0.T_node~0.p1'| Bool) (|$Check_spec~0.H_discovery~0.out'| Bool) (|$~flatten0'| Int) (|$~flatten1'| Int) (|$~flatten2'| Bool) (|$~flatten3'| Bool) (|%init'| Bool) (|%assertions'| Bool)) Bool (and (= |$sig0'| (ite %init 1 $~flatten1)) (= |$out0'| (and (not %init) $~flatten3)) (= |$ok'| (not |$Check_spec~0.ok'|)) (= |$Check_spec~0.step'| (ite %init 0 (+ 1 $Check_spec~0.step))) (= |$Check_spec~0.stepOK'| (or (not (< |$Check_spec~0.step'| 3)) |$Check_spec~0.T_node~0.ok'|)) (= |$Check_spec~0.ok'| (and (>= |$Check_spec~0.step'| 3) |$Check_spec~0.H_discovery~0.out'|)) (= |$Check_spec~0.T_node~0.start_bt'| (and (not %init) (ite $Check_spec~0.T_node~0.reset_flag |$hole_0'| (ite (and (and (not $Check_spec~0.T_node~0.start_bt) (not $Check_spec~0.T_node~0.launch_bt)) (= |$sig0'| 0)) |$hole_1'| $Check_spec~0.T_node~0.start_bt)))) (= |$Check_spec~0.T_node~0.launch_bt'| (and (not %init) (ite $Check_spec~0.T_node~0.reset_flag |$hole_2'| (ite (and (and $Check_spec~0.T_node~0.start_bt (not $Check_spec~0.T_node~0.launch_bt)) (= |$sig0'| 1)) |$hole_3'| $Check_spec~0.T_node~0.launch_bt)))) (= |$Check_spec~0.T_node~0.reset_flag'| (and (not %init) $out0)) (= |$Check_spec~0.T_node~0.p1'| (= |$out0'| (and (not %init) (and $Check_spec~0.T_node~0.launch_bt (not |$Check_spec~0.T_node~0.reset_flag'|)) (not $Check_spec~0.T_node~0.reset_flag)))) (= |$Check_spec~0.T_node~0.ok'| (or %init |$Check_spec~0.T_node~0.p1'|)) (= |$Check_spec~0.H_discovery~0.out'| (ite %init |$Check_spec~0.stepOK'| (and |$Check_spec~0.stepOK'| $Check_spec~0.H_discovery~0.out))) (= |$~flatten0'| (ite %init 1 0)) (= |$~flatten1'| (ite %init 0 $~flatten0)) (= |$~flatten2'| (not %init)) (= |$~flatten3'| (and (not %init) $~flatten2)) (= |%assertions'| (and (or %init (= |$hole_0'| $hole_0)) (or %init (= |$hole_1'| $hole_1)) (or %init (= |$hole_2'| $hole_2)) (or %init (= |$hole_3'| $hole_3)) (or %init %assertions))) (not |%init'|)))
(assert (! (T $hole_0- $hole_1- $hole_2- $hole_3- $ok- $sig0- $out0- $Check_spec~0.ok- $Check_spec~0.step- $Check_spec~0.stepOK- $Check_spec~0.T_node~0.ok- $Check_spec~0.T_node~0.start_bt- $Check_spec~0.T_node~0.launch_bt- $Check_spec~0.T_node~0.reset_flag- $Check_spec~0.T_node~0.p1- $Check_spec~0.H_discovery~0.out- $~flatten0- $~flatten1- $~flatten2- $~flatten3- %init- %assertions- |$hole_0-'| |$hole_1-'| |$hole_2-'| |$hole_3-'| |$ok-'| |$sig0-'| |$out0-'| |$Check_spec~0.ok-'| |$Check_spec~0.step-'| |$Check_spec~0.stepOK-'| |$Check_spec~0.T_node~0.ok-'| |$Check_spec~0.T_node~0.start_bt-'| |$Check_spec~0.T_node~0.launch_bt-'| |$Check_spec~0.T_node~0.reset_flag-'| |$Check_spec~0.T_node~0.p1-'| |$Check_spec~0.H_discovery~0.out-'| |$~flatten0-'| |$~flatten1-'| |$~flatten2-'| |$~flatten3-'| |%init-'| |%assertions-'|) :named abstract0))
(echo "New predicate: %init")
(assert (! (= %init %init-) :named abstract1))
(assert (! (= |%init-'| |%init'|) :named abstract2))
(echo "New predicate: $ok")
(assert (! (= $ok $ok-) :named abstract3))
(assert (! (= |$ok-'| |$ok'|) :named abstract4))
(echo "New predicate: %assertions")
(assert (! (= %assertions %assertions-) :named abstract5))
(assert (! (= |%assertions-'| |%assertions'|) :named abstract6))
(echo "Checking property: ok")
(push 1)
(assert (and %init (not (or $ok (not %assertions) %init))))
