repair node discover_binary_op(a:bool; b:bool) [hole1: inthole] returns (out: bool);

let
    out = if (hole1 = 0) then a and b
           else if(hole1=1) then a or b
           else if(hole1 =2) then a xor b
           else a => b;

tel;


repair node discover_id(i1:bool; i2:bool; i3:bool) [hole2: inthole] returns (out: bool);

let
    out = if (hole2 = 0) then i1
           else if(hole2 = 1) then i2
           else i3 ;

tel;



repair node discover_const(in : int) [hole3: boolhole] returns (out: bool);

let
    out = if (hole3) then true
           else false;
tel;


node main(a: bool; b:bool; c:bool; threshold :int; out: bool) returns (p1: bool);

let

    p1 = (repair(true, discover_const(1))) -> out => ((repair((not (a and b) ), discover_binary_op(a,b)) or (repair(a,
    discover_id(a,b,c)
    ) and c) or
     (a and c)) and
    (threshold >
    5));

  --%PROPERTY p1;

tel;
