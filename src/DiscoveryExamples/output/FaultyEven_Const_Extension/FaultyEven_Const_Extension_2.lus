node T_node(
  signal : bool;
  out : int
) returns (
  p1 : bool
);
var
  even : bool;
let
  even = (true -> (if signal then (not (pre even)) else (pre even)));

  p1 = (even => ((0 < out) and (out < 9)));

  --%PROPERTY p1;

tel;

node R_node(
  signal_bool : bool;
  countState : int;
  output : int
) returns (
  r347_countState_1_5_2 : int;
  r347_output_1_5_2 : int
);
var
  w5_2 : int;
  w7_2 : int;
  r347_countState_1_1_2 : int;
  r347_countState_1_3_2 : int;
  w8_2 : int;
  w10_2 : int;
  r347_output_1_1_2 : int;
  r347_output_1_2_2 : int;
  r347_output_1_3_2 : int;
  w13_2 : int;
  w9_1 : int;
  w10_1 : int;
  symVar : int;
  signal : int;
let
  w5_2 = countState;

  w7_2 = (w5_2 + 1);

  r347_countState_1_1_2 = w7_2;

  r347_countState_1_3_2 = (if (not (signal = 0)) then r347_countState_1_1_2 else countState);

  w8_2 = r347_countState_1_3_2;

  w10_2 = (w8_2 mod 2);

  r347_output_1_1_2 = 7;

  r347_output_1_2_2 = 15;

  r347_output_1_3_2 = (if (not (w10_2 <> 0)) then r347_output_1_1_2 else r347_output_1_2_2);

  w13_2 = r347_output_1_3_2;

  w9_1 = w13_2;

  r347_countState_1_5_2 = (0 -> (if (not (symVar = 0)) then r347_countState_1_3_2 else countState));

  r347_output_1_5_2 = (8 -> (if (not (symVar = 0)) then r347_output_1_3_2 else output));

  w10_1 = (if (not (symVar = 0)) then w9_1 else output);

  signal = (if signal_bool then 1 else 0);

  symVar = 1;

tel;

node R_wrapper(
  signal_bool : bool
) returns (
  out_0 : int
);
var
  countState : int;
  output : int;
let
  countState, output = R_node(signal_bool, (0 -> (pre countState)), (0 -> (pre output)));

  out_0 = output;

tel;

node main(
  signal : bool
) returns (
  discovery_out : bool
);
var
  out : int;
let
  --%MAIN;
  out = R_wrapper(signal);

  discovery_out = T_node(signal, out);

tel;
