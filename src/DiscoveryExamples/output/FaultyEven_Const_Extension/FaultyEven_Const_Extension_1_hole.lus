node T_node(
  signal : bool;
  out : int;
  hole2 : int;
  hole1 : int
) returns (
  p1 : bool
);
var
  even : bool;
let
  even = (true -> (if signal then (not (pre even)) else (pre even)));

  p1 = (even => ((discover_const1(1, hole1) < out) and (out < discover_const2(1, hole2))));

tel;

node discover_const1(
  in : int;
  hole1 : int
) returns (
  out : int
);
let
  out = hole1;

tel;

node discover_const2(
  in : int;
  hole2 : int
) returns (
  out : int
);
let
  out = hole2;

tel;

node H_discovery(
  in : bool
) returns (
  out : bool
);
let
  out = (in -> (in and (pre out)));

tel;

node Check_spec(
  signal : bool;
  out : int;
  hole2 : int;
  hole1 : int;
  k : int
) returns (
  p1 : bool
);
var
  step : int;
  stepOK : bool;
let
  step = (0 -> (1 + (pre step)));

  stepOK = (if (step <= k) then T_node(signal, out, hole2, hole1) else true);

  p1 = ((step >= k) and H_discovery(stepOK));

tel;

node main(
  hole2 : int;
  hole1 : int
) returns (
  fail : bool
);
var
  ok_0 : bool;
  ok_1 : bool;
  signal0 : bool;
  out_00 : int;
  signal1 : bool;
  out_01 : int;
let
  --%MAIN;
  signal0 = false;

  out_00 = 8;

  signal1 = (true -> (pre false));

  out_01 = (8 -> (pre 7));

  ok_0 = Check_spec(signal0, out_00, hole2, hole1, 0);

  ok_1 = Check_spec(signal1, out_01, hole2, hole1, 1);

  fail = (not (ok_0 and ok_1));

  assert (true -> (hole2 = (pre hole2)));

  assert (true -> (hole1 = (pre hole1)));

  --%PROPERTY fail;

tel;
