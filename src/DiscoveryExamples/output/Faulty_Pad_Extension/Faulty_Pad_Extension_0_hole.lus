const START_SIG = 0;
const LAUNCH_SIG = 1;

node Y(
  in : bool
) returns (
  out : bool
);
let
  out = (false -> (pre in));

tel;

node H(
  in : bool
) returns (
  out : bool
);
let
  out = (in -> (in and (pre out)));

tel;

node T_node(
  sig : int;
  ignition : bool;
  hole2 : bool;
  hole1 : bool;
  hole4 : bool;
  hole3 : bool;
  hole6 : bool;
  hole5 : bool;
  hole8 : bool;
  hole7 : bool
) returns (
  p1 : bool
);
var
  start_bt : bool;
  launch_bt : bool;
  reset_flag : bool;
let
  start_bt = (discover_const5(1, hole5) -> (if (pre reset_flag) then discover_const1(1, hole1) else (if (((not (pre start_bt)) and (not (pre launch_bt))) and (sig = START_SIG)) then discover_const2(1, hole2) else (pre start_bt))));

  launch_bt = (discover_const6(1, hole6) -> (if (pre reset_flag) then discover_const3(1, hole3) else (if (((pre start_bt) and (not (pre launch_bt))) and (sig = LAUNCH_SIG)) then discover_const4(1, hole4) else (pre launch_bt))));

  reset_flag = (discover_const7(1, hole7) -> (pre ignition));

  p1 = (ignition = (discover_const8(1, hole8) -> (((pre launch_bt) and (not reset_flag)) and (not (pre reset_flag)))));

tel;

node discover_const1(
  in : int;
  hole1 : bool
) returns (
  out : bool
);
let
  out = (if hole1 then true else false);

tel;

node discover_const2(
  in : int;
  hole2 : bool
) returns (
  out : bool
);
let
  out = (if hole2 then true else false);

tel;

node discover_const3(
  in : int;
  hole3 : bool
) returns (
  out : bool
);
let
  out = (if hole3 then true else false);

tel;

node discover_const4(
  in : int;
  hole4 : bool
) returns (
  out : bool
);
let
  out = (if hole4 then true else false);

tel;

node discover_const5(
  in : int;
  hole5 : bool
) returns (
  out : bool
);
let
  out = (if hole5 then true else false);

tel;

node discover_const6(
  in : int;
  hole6 : bool
) returns (
  out : bool
);
let
  out = (if hole6 then true else false);

tel;

node discover_const7(
  in : int;
  hole7 : bool
) returns (
  out : bool
);
let
  out = (if hole7 then true else false);

tel;

node discover_const8(
  in : int;
  hole8 : bool
) returns (
  out : bool
);
let
  out = (if hole8 then true else false);

tel;

node H_discovery(
  in : bool
) returns (
  out : bool
);
let
  out = (in -> (in and (pre out)));

tel;

node Check_spec(
  sig : int;
  ignition : bool;
  hole2 : bool;
  hole1 : bool;
  hole4 : bool;
  hole3 : bool;
  hole6 : bool;
  hole5 : bool;
  hole8 : bool;
  hole7 : bool;
  k : int
) returns (
  p1 : bool
);
var
  step : int;
  stepOK : bool;
let
  step = (0 -> (1 + (pre step)));

  stepOK = (if (step <= k) then T_node(sig, ignition, hole2, hole1, hole4, hole3, hole6, hole5, hole8, hole7) else true);

  p1 = ((step >= k) and H_discovery(stepOK));

tel;

node main(
  hole2 : bool;
  hole1 : bool;
  hole4 : bool;
  hole3 : bool;
  hole6 : bool;
  hole5 : bool;
  hole8 : bool;
  hole7 : bool
) returns (
  fail : bool
);
var
  sig0 : int;
  out_00 : bool;
  ok_0 : bool;
let
  --%MAIN;
  sig0 = 2;

  out_00 = false;

  ok_0 = Check_spec(sig0, out_00, hole2, hole1, hole4, hole3, hole6, hole5, hole8, hole7, 0);

  fail = (not ok_0);

  assert (true -> (hole2 = (pre hole2)));

  assert (true -> (hole1 = (pre hole1)));

  assert (true -> (hole4 = (pre hole4)));

  assert (true -> (hole3 = (pre hole3)));

  assert (true -> (hole6 = (pre hole6)));

  assert (true -> (hole5 = (pre hole5)));

  assert (true -> (hole8 = (pre hole8)));

  assert (true -> (hole7 = (pre hole7)));

  --%PROPERTY fail;

tel;
