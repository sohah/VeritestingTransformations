const START_SIG = 0;
const LAUNCH_SIG = 1;

node Y(
  in : bool
) returns (
  out : bool
);
let
  out = (false -> (pre in));

tel;

node H(
  in : bool
) returns (
  out : bool
);
let
  out = (in -> (in and (pre out)));

tel;

node main(
  sig : int;
  ignition : bool
) returns (
  p1 : bool
);
var
  start_bt : bool;
  launch_bt : bool;
  reset_flag : bool;
let
  --%MAIN;
  start_bt = (repair( false , discover_const5(1) )  -> (if (pre reset_flag) then repair( false , discover_const1(1) )  else (if (((not (pre start_bt)) and (not (pre launch_bt))) and (sig = START_SIG)) then repair( true , discover_const2(1) )  else (pre start_bt))));

  launch_bt = (repair( false , discover_const6(1) )  -> (if (pre reset_flag) then repair( false , discover_const3(1) )  else (if (((pre start_bt) and (not (pre launch_bt))) and (sig = LAUNCH_SIG)) then repair( true , discover_const4(1) )  else (pre launch_bt))));

  reset_flag = (repair( false , discover_const7(1) )  -> (pre ignition));

  p1 = (ignition = (repair( false , discover_const8(1) )  -> (((pre launch_bt) and (not reset_flag)) and (not (pre reset_flag)))));

  --%PROPERTY p1;

tel;
node discover_const1(
  in : int[  hole1 : boolhole]
) returns (
  out : bool
);
let
  out = (if hole1 then true else false);

tel;

node discover_const2(
  in : int[  hole2 : boolhole]
) returns (
  out : bool
);
let
  out = (if hole2 then true else false);

tel;

node discover_const3(
  in : int[  hole3 : boolhole]
) returns (
  out : bool
);
let
  out = (if hole3 then true else false);

tel;

node discover_const4(
  in : int[  hole4 : boolhole]
) returns (
  out : bool
);
let
  out = (if hole4 then true else false);

tel;

node discover_const5(
  in : int[  hole5 : boolhole]
) returns (
  out : bool
);
let
  out = (if hole5 then true else false);

tel;

node discover_const6(
  in : int[  hole6 : boolhole]
) returns (
  out : bool
);
let
  out = (if hole6 then true else false);

tel;

node discover_const7(
  in : int[  hole7 : boolhole]
) returns (
  out : bool
);
let
  out = (if hole7 then true else false);

tel;

node discover_const8(
  in : int[  hole8 : boolhole]
) returns (
  out : bool
);
let
  out = (if hole8 then true else false);

tel;
