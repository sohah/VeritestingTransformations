node T_node(
  pedal_r : int;
  autoBreak_r : bool;
  skid_r : bool;
  NormalPressure_r : int;
  AltPressure_r : int;
  Sys_Mode : int;
  valhole_0_0 : int;
  valhole_1_1 : int;
  valhole_2_2 : int;
  valhole_3_3 : int;
  valhole_4_4 : int;
  const_hole0_5 : int;
  const_hole1_6 : int;
  const_hole2_7 : int;
  const_hole3_8 : int;
  level_1_hole_9 : int;
  level_2_hole_10 : int;
  level_3_hole_11 : int
) returns (
  p1 : bool
);
let
  p1 = (true -> (skid_r => discover_binary_Bool_0_Int_4_0(pedal_r, AltPressure_r, NormalPressure_r, Sys_Mode, valhole_0_0, valhole_1_1, valhole_2_2, valhole_3_3, valhole_4_4, const_hole0_5, const_hole1_6, const_hole2_7, const_hole3_8, level_1_hole_9, level_2_hole_10, level_3_hole_11)));

tel;

node discover_binary_Bool_0_Int_4_0(
  i0 : int;
  i1 : int;
  i2 : int;
  i3 : int;
  valhole_0_0 : int;
  valhole_1_1 : int;
  valhole_2_2 : int;
  valhole_3_3 : int;
  valhole_4_4 : int;
  const_hole0_5 : int;
  const_hole1_6 : int;
  const_hole2_7 : int;
  const_hole3_8 : int;
  level_1_hole_9 : int;
  level_2_hole_10 : int;
  level_3_hole_11 : int
) returns (
  out : bool
);
var
  bExprlevel_0_1 : bool;
  bExprlevel_0_2 : bool;
  bExprlevel_0_3 : bool;
  bExprlevel_0_4 : bool;
  bExprlevel_1 : bool;
  bExprlevel_2 : bool;
  bExprlevel_3 : bool;
let
  bExprlevel_0_1 = (if (valhole_0_0 = 0) then (i0 <= const_hole0_5) else (if (valhole_0_0 = 1) then (i0 > const_hole0_5) else (i0 = const_hole0_5)));

  bExprlevel_0_2 = (if (valhole_1_1 = 0) then (i1 <= const_hole1_6) else (if (valhole_1_1 = 1) then (i1 > const_hole1_6) else (i1 = const_hole1_6)));

  bExprlevel_0_3 = (if (valhole_2_2 = 0) then (i2 <= const_hole2_7) else (if (valhole_2_2 = 1) then (i2 > const_hole2_7) else (i2 = const_hole2_7)));

  bExprlevel_0_4 = (if (valhole_3_3 = 0) then (i3 <= const_hole3_8) else (if (valhole_3_3 = 1) then (i3 > const_hole3_8) else (i3 = const_hole3_8)));

  bExprlevel_1 = (if (level_1_hole_9 = 1) then (not bExprlevel_0_1) else (if (level_1_hole_9 = 2) then (not bExprlevel_0_2) else (if (level_1_hole_9 = 3) then (not bExprlevel_0_3) else (if (level_1_hole_9 = 4) then (not bExprlevel_0_4) else (if (level_1_hole_9 = 9) then (bExprlevel_0_1 and bExprlevel_0_2) else (if (level_1_hole_9 = 10) then (bExprlevel_0_1 and bExprlevel_0_3) else (if (level_1_hole_9 = 11) then (bExprlevel_0_1 and bExprlevel_0_4) else (if (level_1_hole_9 = 12) then (bExprlevel_0_2 and bExprlevel_0_3) else (if (level_1_hole_9 = 13) then (bExprlevel_0_2 and bExprlevel_0_4) else (if (level_1_hole_9 = 14) then (bExprlevel_0_3 and bExprlevel_0_4) else (if (level_1_hole_9 = 19) then (bExprlevel_0_1 or bExprlevel_0_2) else (if (level_1_hole_9 = 20) then (bExprlevel_0_1 or bExprlevel_0_3) else (if (level_1_hole_9 = 21) then (bExprlevel_0_1 or bExprlevel_0_4) else (if (level_1_hole_9 = 22) then (bExprlevel_0_2 or bExprlevel_0_3) else (if (level_1_hole_9 = 23) then (bExprlevel_0_2 or bExprlevel_0_4) else (if (level_1_hole_9 = 24) then (bExprlevel_0_3 or bExprlevel_0_4) else (if (level_1_hole_9 = 29) then (bExprlevel_0_1 xor bExprlevel_0_2) else (if (level_1_hole_9 = 30) then (bExprlevel_0_1 xor bExprlevel_0_3) else (if (level_1_hole_9 = 31) then (bExprlevel_0_1 xor bExprlevel_0_4) else (if (level_1_hole_9 = 32) then (bExprlevel_0_2 xor bExprlevel_0_3) else (if (level_1_hole_9 = 33) then (bExprlevel_0_2 xor bExprlevel_0_4) else (bExprlevel_0_3 xor bExprlevel_0_4))))))))))))))))))))));

  bExprlevel_2 = (if (level_2_hole_10 = 0) then (not bExprlevel_1) else (if (level_2_hole_10 = 1) then (bExprlevel_1 and bExprlevel_1) else (if (level_2_hole_10 = 2) then (bExprlevel_1 or bExprlevel_1) else (bExprlevel_1 xor bExprlevel_1))));

  bExprlevel_3 = (if (level_3_hole_11 = 0) then (not bExprlevel_2) else (if (level_3_hole_11 = 1) then (bExprlevel_2 and bExprlevel_2) else (if (level_3_hole_11 = 2) then (bExprlevel_2 or bExprlevel_2) else (bExprlevel_2 xor bExprlevel_2))));

  out = bExprlevel_3;

tel;

node H_discovery(
  in : bool
) returns (
  out : bool
);
let
  out = (in -> (in and (pre out)));

tel;

node Check_spec(
  pedal_r : int;
  autoBreak_r : bool;
  skid_r : bool;
  NormalPressure_r : int;
  AltPressure_r : int;
  Sys_Mode : int;
  valhole_0_0 : int;
  valhole_1_1 : int;
  valhole_2_2 : int;
  valhole_3_3 : int;
  valhole_4_4 : int;
  const_hole0_5 : int;
  const_hole1_6 : int;
  const_hole2_7 : int;
  const_hole3_8 : int;
  level_1_hole_9 : int;
  level_2_hole_10 : int;
  level_3_hole_11 : int;
  k : int
) returns (
  p1 : bool
);
var
  step : int;
  stepOK : bool;
let
  step = (0 -> (1 + (pre step)));

  stepOK = (if (step <= k) then T_node(pedal_r, autoBreak_r, skid_r, NormalPressure_r, AltPressure_r, Sys_Mode, valhole_0_0, valhole_1_1, valhole_2_2, valhole_3_3, valhole_4_4, const_hole0_5, const_hole1_6, const_hole2_7, const_hole3_8, level_1_hole_9, level_2_hole_10, level_3_hole_11) else true);

  p1 = ((step >= k) and H_discovery(stepOK));

tel;

node Fixed_T(
  pedal_r : int;
  autoBreak_r : bool;
  skid_r : bool;
  NormalPressure_r : int;
  AltPressure_r : int;
  Sys_Mode : int
) returns (
  p1 : bool
);
let
  p1 = (true -> (skid_r => ((not (not (NormalPressure_r = 0))) or (not (not (NormalPressure_r = 0))))));

tel;

node main(
  pedal_r : int;
  autoBreak_r : bool;
  skid_r : bool;
  NormalPressure_r : int;
  AltPressure_r : int;
  Sys_Mode : int;
  valhole_0_0 : int;
  valhole_1_1 : int;
  valhole_2_2 : int;
  valhole_3_3 : int;
  valhole_4_4 : int;
  const_hole0_5 : int;
  const_hole1_6 : int;
  const_hole2_7 : int;
  const_hole3_8 : int;
  level_1_hole_9 : int;
  level_2_hole_10 : int;
  level_3_hole_11 : int
) returns (
  fail : bool
);
var
  ok_0 : bool;
  ok_1 : bool;
  pedal_r0 : int;
  autoBreak_r0 : bool;
  skid_r0 : bool;
  out_00 : int;
  out_10 : int;
  out_20 : int;
  pedal_r1 : int;
  autoBreak_r1 : bool;
  skid_r1 : bool;
  out_01 : int;
  out_11 : int;
  out_21 : int;
  fixedRout : bool;
  rPrimeOut : bool;
let
  --%MAIN;
  pedal_r0 = (4 -> (pre 4));

  autoBreak_r0 = (false -> (pre false));

  skid_r0 = (false -> (pre true));

  out_00 = (0 -> (pre 0));

  out_10 = (0 -> (pre 0));

  out_20 = (0 -> (pre 0));

  pedal_r1 = (4 -> (pre 9));

  autoBreak_r1 = (true -> (pre false));

  skid_r1 = (false -> (pre true));

  out_01 = (0 -> (pre 0));

  out_11 = (0 -> (pre 0));

  out_21 = (0 -> (pre 0));

  ok_0 = Check_spec(pedal_r0, autoBreak_r0, skid_r0, out_00, out_10, out_20, valhole_0_0, valhole_1_1, valhole_2_2, valhole_3_3, valhole_4_4, const_hole0_5, const_hole1_6, const_hole2_7, const_hole3_8, level_1_hole_9, level_2_hole_10, level_3_hole_11, 1);

  ok_1 = Check_spec(pedal_r1, autoBreak_r1, skid_r1, out_01, out_11, out_21, valhole_0_0, valhole_1_1, valhole_2_2, valhole_3_3, valhole_4_4, const_hole0_5, const_hole1_6, const_hole2_7, const_hole3_8, level_1_hole_9, level_2_hole_10, level_3_hole_11, 1);

  fail = (not ((not ok_1) and (ok_0 and (fixedRout and (not rPrimeOut)))));

  fixedRout = Fixed_T(pedal_r, autoBreak_r, skid_r, NormalPressure_r, AltPressure_r, Sys_Mode);

  rPrimeOut = Check_spec(pedal_r, autoBreak_r, skid_r, NormalPressure_r, AltPressure_r, Sys_Mode, valhole_0_0, valhole_1_1, valhole_2_2, valhole_3_3, valhole_4_4, const_hole0_5, const_hole1_6, const_hole2_7, const_hole3_8, level_1_hole_9, level_2_hole_10, level_3_hole_11, 2);

  assert (true -> (valhole_0_0 = (pre valhole_0_0)));

  assert (true -> (valhole_1_1 = (pre valhole_1_1)));

  assert (true -> (valhole_2_2 = (pre valhole_2_2)));

  assert (true -> (valhole_3_3 = (pre valhole_3_3)));

  assert (true -> (valhole_4_4 = (pre valhole_4_4)));

  assert (true -> (const_hole0_5 = (pre const_hole0_5)));

  assert (true -> (const_hole1_6 = (pre const_hole1_6)));

  assert (true -> (const_hole2_7 = (pre const_hole2_7)));

  assert (true -> (const_hole3_8 = (pre const_hole3_8)));

  assert (true -> (level_1_hole_9 = (pre level_1_hole_9)));

  assert (true -> (level_2_hole_10 = (pre level_2_hole_10)));

  assert (true -> (level_3_hole_11 = (pre level_3_hole_11)));

  --%PROPERTY fail;

tel;
