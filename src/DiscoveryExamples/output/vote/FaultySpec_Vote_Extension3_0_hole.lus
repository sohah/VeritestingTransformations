node T_node(
  a : bool;
  b : bool;
  c : bool;
  threshold : int;
  out : bool;
  hole2 : int;
  hole1 : int;
  hole3 : bool
) returns (
  p1 : bool
);
let
  p1 = (discover_const(1, hole3) -> (out => (((discover_binary_op(a, b, hole1) or (discover_id(a, b, c, hole2) and c)) or (a and c)) and (threshold > 5))));

tel;

node discover_binary_op(
  a : bool;
  b : bool;
  hole1 : int
) returns (
  out : bool
);
let
  out = (if (hole1 = 0) then (a and b) else (if (hole1 = 1) then (a or b) else (if (hole1 = 2) then (a xor b) else (a => b))));

tel;

node discover_id(
  i1 : bool;
  i2 : bool;
  i3 : bool;
  hole2 : int
) returns (
  out : bool
);
let
  out = (if (hole2 = 0) then i1 else (if (hole2 = 1) then i2 else i3));

tel;

node discover_const(
  in : int;
  hole3 : bool
) returns (
  out : bool
);
let
  out = (if hole3 then true else false);

tel;

node H_discovery(
  in : bool
) returns (
  out : bool
);
let
  out = (in -> (in and (pre out)));

tel;

node Check_spec(
  a : bool;
  b : bool;
  c : bool;
  threshold : int;
  out : bool;
  hole2 : int;
  hole1 : int;
  hole3 : bool;
  k : int
) returns (
  p1 : bool
);
var
  step : int;
  stepOK : bool;
let
  step = (0 -> (1 + (pre step)));

  stepOK = (if (step <= k) then T_node(a, b, c, threshold, out, hole2, hole1, hole3) else true);

  p1 = ((step >= k) and H_discovery(stepOK));

tel;

node main(
  hole2 : int;
  hole1 : int;
  hole3 : bool
) returns (
  fail : bool
);
var
  a0 : bool;
  b0 : bool;
  c0 : bool;
  threshold0 : int;
  out_00 : bool;
  ok_0 : bool;
let
  --%MAIN;
  a0 = (false -> (pre true));

  b0 = (false -> (pre true));

  c0 = (true -> (pre false));

  threshold0 = (0 -> (pre 6));

  out_00 = (false -> (pre true));

  ok_0 = Check_spec(a0, b0, c0, threshold0, out_00, hole2, hole1, hole3, 1);

  fail = (not ok_0);

  assert (true -> (hole2 = (pre hole2)));

  assert (true -> (hole1 = (pre hole1)));

  assert (true -> (hole3 = (pre hole3)));

  --%PROPERTY fail;

tel;
