node T_node(
  pedal_r : int;
  autoBreak_r : bool;
  skid_r : bool;
  NormalPressure_r : int;
  AltPressure_r : int;
  Sys_Mode : int;
  hole_0 : bool;
  hole_1 : int;
  hole_2 : bool;
  hole_3 : int;
  hole_4 : bool;
  hole_5 : bool;
  hole_6 : bool;
  hole_7 : int;
  hole_8 : bool;
  hole_9 : int
) returns (
  p1 : bool
);
var
  container_0 : int;
  container_1 : int;
  container_2 : bool;
  container_3 : int;
  container_4 : int;
let
  p1 = ((((container_0 > 0) and (container_1 <= 4)) and (not container_2)) => ((container_3 > 0) or (container_4 > 0)));

  container_0 = (if hole_0 then pedal_r else (hole_1 -> (pre pedal_r)));

  container_1 = (if hole_2 then pedal_r else (hole_3 -> (pre pedal_r)));

  container_2 = (if hole_4 then skid_r else (hole_5 -> (pre skid_r)));

  container_3 = (if hole_6 then AltPressure_r else (hole_7 -> (pre AltPressure_r)));

  container_4 = (if hole_8 then NormalPressure_r else (hole_9 -> (pre NormalPressure_r)));

tel;

node H_discovery(
  in : bool
) returns (
  out : bool
);
let
  out = (in -> (in and (pre out)));

tel;

node Check_spec(
  pedal_r : int;
  autoBreak_r : bool;
  skid_r : bool;
  NormalPressure_r : int;
  AltPressure_r : int;
  Sys_Mode : int;
  hole_0 : bool;
  hole_1 : int;
  hole_2 : bool;
  hole_3 : int;
  hole_4 : bool;
  hole_5 : bool;
  hole_6 : bool;
  hole_7 : int;
  hole_8 : bool;
  hole_9 : int;
  k : int
) returns (
  p1 : bool
);
var
  step : int;
  stepOK : bool;
let
  step = (0 -> (1 + (pre step)));

  stepOK = (if (step <= k) then T_node(pedal_r, autoBreak_r, skid_r, NormalPressure_r, AltPressure_r, Sys_Mode, hole_0, hole_1, hole_2, hole_3, hole_4, hole_5, hole_6, hole_7, hole_8, hole_9) else true);

  p1 = ((step >= k) and H_discovery(stepOK));

tel;

node main(
  hole_0 : bool;
  hole_1 : int;
  hole_2 : bool;
  hole_3 : int;
  hole_4 : bool;
  hole_5 : bool;
  hole_6 : bool;
  hole_7 : int;
  hole_8 : bool;
  hole_9 : int
) returns (
  fail : bool
);
var
  pedal_r0 : int;
  autoBreak_r0 : bool;
  skid_r0 : bool;
  out_00 : int;
  out_10 : int;
  out_20 : int;
  ok_0 : bool;
let
  --%MAIN;
  pedal_r0 = 3;

  autoBreak_r0 = false;

  skid_r0 = false;

  out_00 = 0;

  out_10 = 0;

  out_20 = 0;

  ok_0 = Check_spec(pedal_r0, autoBreak_r0, skid_r0, out_00, out_10, out_20, hole_0, hole_1, hole_2, hole_3, hole_4, hole_5, hole_6, hole_7, hole_8, hole_9, 0);

  fail = (not ok_0);

  assert (true -> (hole_0 = (pre hole_0)));

  assert (true -> (hole_1 = (pre hole_1)));

  assert (true -> (hole_2 = (pre hole_2)));

  assert (true -> (hole_3 = (pre hole_3)));

  assert (true -> (hole_4 = (pre hole_4)));

  assert (true -> (hole_5 = (pre hole_5)));

  assert (true -> (hole_6 = (pre hole_6)));

  assert (true -> (hole_7 = (pre hole_7)));

  assert (true -> (hole_8 = (pre hole_8)));

  assert (true -> (hole_9 = (pre hole_9)));

  --%PROPERTY fail;

tel;
