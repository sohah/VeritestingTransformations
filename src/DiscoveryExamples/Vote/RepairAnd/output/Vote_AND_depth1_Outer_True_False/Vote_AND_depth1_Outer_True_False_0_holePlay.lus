node discover_binary_Bool_4_Int_0_0(
  a0 : bool;
  a1 : bool;
  a2 : bool;
  valhole_0_0 : int
) returns (
  out : bool
);
var
  bExprlevel_0_0 : bool;

let
  bExprlevel_0_0 = (if (valhole_0_0 = 3) then true else false);

  out = bExprlevel_0_0;

tel;

node T_node(
  a : bool;
  b : bool;
  c : bool;
  threshold : int;
  out : bool;
  valhole_0_0 : int
) returns (
  p1 : bool
);
let
  p1 = (true -> (discover_binary_Bool_4_Int_0_0(a, b, c, valhole_0_0) and out));

tel;



node H_discovery(
  in : bool
) returns (
  out : bool
);
let
  out = (in -> (in and (pre out)));

tel;

node Check_spec(
  a : bool;
  b : bool;
  c : bool;
  threshold : int;
  out : bool;
  valhole_0_0 : int;
  k : int
) returns (
  p1 : bool
);
var
  step : int;
  stepOK : bool;
let
  step = (0 -> (1 + (pre step)));

  stepOK = (if (step <= k) then T_node(a, b, c, threshold, out, valhole_0_0) else true);

  p1 = ((step >= k) and stepOK );

tel;

node main(
  valhole_0_0 : int
) returns (
  fail : bool
);
var
  a0 : bool;
  b0 : bool;
  c0 : bool;
  threshold0 : int;
  out_00 : bool;
  ok_0 : bool;
let
  --%MAIN;
  a0 = (true -> (pre false));

  b0 = (false -> (pre true));

  c0 = (false -> (pre false));

  threshold0 = (10 -> (pre 0));

  out_00 = (false -> (pre false));

  ok_0 = Check_spec(a0, b0, c0, threshold0, out_00, valhole_0_0, 1);

  fail = (not ok_0);

  assert (true -> (valhole_0_0 = (pre valhole_0_0)));

  --%PROPERTY fail;

tel;
