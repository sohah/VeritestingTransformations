-- most general repair
repair node discover_binary_Bool_4_Int_0(a0:bool; a1:bool; a2:bool) [valhole_0: inthole; valhole_1:
inthole;
valhole_2: inthole;

valhole_3: inthole;
valhole_4: inthole;
valhole_5: inthole;

level_1_hole:inthole;

level_1_1_hole:inthole;
level_2_hole: inthole]

returns (out: bool);

var
bExprlevel_0_0:bool;
bExprlevel_0_1:bool;
bExprlevel_0_2:bool;

bExprlevel_0_3:bool;
bExprlevel_0_4:bool;
bExprlevel_0_5:bool;

bExprlevel_1_0:bool;

bExprlevel_1_1:bool;

bExprlevel_2_0:bool;

let
    bExprlevel_0_0 = if(valhole_0 = 1) then false
                    else if(valhole_0 = 2) then true
                    else if(valhole_0 = 3) then a0
                    else if(valhole_0 = 4) then a1
                    else a2;


    bExprlevel_0_1 = if(valhole_1 = 1) then false
                    else if(valhole_1 = 2) then true
                    else if(valhole_1 = 3) then a0
                    else if(valhole_1 = 4) then a1
                    else a2;

    bExprlevel_0_2 = if(valhole_2 = 1) then false
                    else if(valhole_2 = 2) then true
                    else if(valhole_2 = 3) then a0
                    else if(valhole_2 = 4) then a1
                    else a2;


    bExprlevel_1_0 = if(level_1_hole = 0) then bExprlevel_0_0
                   else if(level_1_hole = 3) then bExprlevel_0_1
                   else if(level_1_hole = 4) then bExprlevel_0_2

                   else if(level_1_hole = 5) then not bExprlevel_0_0
                   else if(level_1_hole = 6) then not bExprlevel_0_1
                   else if(level_1_hole = 7) then not bExprlevel_0_2
                   else if(level_1_hole = 8) then bExprlevel_0_0 and bExprlevel_0_1
                   else if(level_1_hole = 9) then bExprlevel_0_0 and bExprlevel_0_2
                   else if(level_1_hole = 10) then bExprlevel_0_1 and bExprlevel_0_2

                   else if(level_1_hole = 11) then bExprlevel_0_0 or bExprlevel_0_1
                   else if(level_1_hole = 12) then bExprlevel_0_0 or bExprlevel_0_2
                   else if(level_1_hole = 13) then bExprlevel_0_1 or bExprlevel_0_2

                   else if(level_1_hole = 14) then bExprlevel_0_0 xor bExprlevel_0_1
                   else if(level_1_hole = 15) then bExprlevel_0_0 xor bExprlevel_0_2
                   else if(level_1_hole = 16) then bExprlevel_0_1 xor bExprlevel_0_2

                   else if(level_1_hole = 17) then bExprlevel_0_0 => bExprlevel_0_1
                   else if(level_1_hole = 18) then bExprlevel_0_0 => bExprlevel_0_2
                   else bExprlevel_0_1 => bExprlevel_0_2;



    bExprlevel_0_3 = if(valhole_3 = 1) then false
                    else if(valhole_3 = 2) then true
                    else if(valhole_3 = 3) then a0
                    else if(valhole_3 = 4) then a1
                    else a2;


    bExprlevel_0_4 = if(valhole_4 = 1) then false
                    else if(valhole_4 = 2) then true
                    else if(valhole_4 = 3) then a0
                    else if(valhole_4 = 4) then a1
                    else a2;

    bExprlevel_0_5 = if(valhole_5 = 1) then false
                    else if(valhole_5 = 2) then true
                    else if(valhole_5 = 3) then a0
                    else if(valhole_5 = 4) then a1
                    else a2;




    bExprlevel_1_1 = if(level_1_1_hole = 0) then bExprlevel_0_3
                   else if(level_1_1_hole = 3) then bExprlevel_0_4
                   else if(level_1_1_hole = 4) then bExprlevel_0_5

                   else if(level_1_1_hole = 5) then not bExprlevel_0_3
                   else if(level_1_1_hole = 6) then not bExprlevel_0_4
                   else if(level_1_1_hole = 7) then not bExprlevel_0_5
                   else if(level_1_1_hole = 8) then bExprlevel_0_0 and bExprlevel_0_3
                   else if(level_1_1_hole = 9) then bExprlevel_0_0 and bExprlevel_0_4
                   else if(level_1_1_hole = 10) then bExprlevel_0_1 and bExprlevel_0_5

                   else if(level_1_1_hole = 11) then bExprlevel_0_0 or bExprlevel_0_3
                   else if(level_1_1_hole = 12) then bExprlevel_0_0 or bExprlevel_0_4
                   else if(level_1_1_hole = 13) then bExprlevel_0_1 or bExprlevel_0_5

                   else if(level_1_1_hole = 14) then bExprlevel_0_0 xor bExprlevel_0_3
                   else if(level_1_1_hole = 15) then bExprlevel_0_0 xor bExprlevel_0_4
                   else if(level_1_1_hole = 16) then bExprlevel_0_1 xor bExprlevel_0_5

                   else if(level_1_1_hole = 17) then bExprlevel_0_0 => bExprlevel_0_3
                   else if(level_1_1_hole = 18) then bExprlevel_0_0 => bExprlevel_0_4
                   else bExprlevel_0_3 => bExprlevel_0_5;



   bExprlevel_2_0 = if(level_2_hole = 0) then bExprlevel_1_0
                   else if(level_2_hole = 1) then bExprlevel_1_1

                   else if(level_2_hole = 2) then not bExprlevel_1_0
                   else if(level_2_hole = 3) then not bExprlevel_1_1

                   else if(level_2_hole = 4) then bExprlevel_1_0 and bExprlevel_1_1

                   else if(level_2_hole = 5) then bExprlevel_1_0 or bExprlevel_1_1

                   else if(level_2_hole = 6) then bExprlevel_1_0 xor bExprlevel_1_1

                   else bExprlevel_1_0 => bExprlevel_1_1;

    out = bExprlevel_2_0;

tel;


node main(a: bool; b:bool; c:bool; threshold :int; out: bool) returns (p1: bool);

let

    p1 = true -> out => (repair((a and b), discover_binary_Bool_4_Int_0(a,b,c)));

  --%PROPERTY p1;

tel;
