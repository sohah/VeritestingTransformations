node T_node(
  a : bool;
  b : bool;
  c : bool;
  out : bool
) returns (
  p1 : bool
);
let
  p1 = (true -> (a and b) or (out => c));

tel;


node Check_spec(
  a : bool;
  b : bool;
  c : bool;
  out : bool;
  k : int
) returns (
  p1 : bool
);
var
  step : int;
  stepOK : bool;
let
  step = (0 -> (1 + (pre step)));

  stepOK = (if (step <= k) then T_node(a, b, c, out) else true);

  p1 = stepOK;

tel;

node main(
  a : bool;
  b : bool;
  c : bool;
  out : bool
) returns (
  fail : bool
);
var
  ok_1 : bool;
  ok_8 : bool;

  a1 : bool;
  b1 : bool;
  c1 : bool;
  out_01 : bool;

  a8 : bool;
  b8 : bool;
  c8 : bool;
  out_08 : bool;
  fail1: bool;

let
  --%MAIN;

  a1 = (true -> (pre false));

  b1 = (false -> (pre false));

  c1 = (true -> (pre false));

  out_01 = (false -> (pre false));


  a8 = (false -> (pre false));

  b8 = (false -> (pre false));

  c8 = (false -> (pre false));

  out_08 = (false -> (pre false));


  ok_1 = Check_spec(a1, b1, c1, out_01, 1);


  ok_8 = Check_spec(a8, b8, c8, out_08, 1);



  fail1 = ( ok_8);

  fail = not(fail1);

  --%PROPERTY fail;

tel;
