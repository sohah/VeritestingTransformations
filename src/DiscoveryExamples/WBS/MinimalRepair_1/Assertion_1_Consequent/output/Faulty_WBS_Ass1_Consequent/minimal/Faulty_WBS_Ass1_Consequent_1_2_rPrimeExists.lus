node T_node(
  pedal_r : int;
  autoBreak_r : bool;
  skid_r : bool;
  NormalPressure_r : int;
  AltPressure_r : int;
  Sys_Mode : int;
  valhole_0_0 : int;
  valhole_1_1 : int;
  valhole_2_2 : int;
  const_hole0_3 : int;
  const_hole1_4 : int;
  const_hole2_5 : int;
  level_1_hole_0_6 : int;
  level_2_hole_7 : int
) returns (
  p1 : bool
);
let
  p1 = (true -> ((((pedal_r > 0) and (pedal_r <= 4)) and (not skid_r)) => discover_binary_Bool_1_Int_3_0(skid_r, pedal_r, NormalPressure_r, Sys_Mode, valhole_0_0, valhole_1_1, valhole_2_2, const_hole0_3, const_hole1_4, const_hole2_5, level_1_hole_0_6, level_2_hole_7)));

tel;

node discover_binary_Bool_1_Int_3_0(
  a0 : bool;
  i0 : int;
  i1 : int;
  i2 : int;
  valhole_0_0 : int;
  valhole_1_1 : int;
  valhole_2_2 : int;
  const_hole0_3 : int;
  const_hole1_4 : int;
  const_hole2_5 : int;
  level_1_hole_0_6 : int;
  level_2_hole_7 : int
) returns (
  out : bool
);
var
  bExprlevel_0_1_0 : bool;
  bExprlevel_0_2_0 : bool;
  bExprlevel_0_3_0 : bool;
  bExprlevel_1_0 : bool;
  bExprlevel_2 : bool;
let
  bExprlevel_0_1_0 = a0;

  bExprlevel_0_2_0 = (if (valhole_1_1 = 3) then (i1 <= const_hole1_4) else (if (valhole_1_1 = 4) then (i1 > const_hole1_4) else (i1 = const_hole1_4)));

  bExprlevel_0_3_0 = (if (valhole_2_2 = 3) then (i2 <= const_hole2_5) else (if (valhole_2_2 = 4) then (i2 > const_hole2_5) else (i2 = const_hole2_5)));

  bExprlevel_1_0 = (if (level_1_hole_0_6 = 1) then bExprlevel_0_1_0 else (if (level_1_hole_0_6 = 2) then bExprlevel_0_2_0 else (if (level_1_hole_0_6 = 3) then bExprlevel_0_3_0 else (if (level_1_hole_0_6 = 9) then (bExprlevel_0_1_0 and bExprlevel_0_2_0) else (if (level_1_hole_0_6 = 10) then (bExprlevel_0_1_0 and bExprlevel_0_3_0) else (if (level_1_hole_0_6 = 12) then (bExprlevel_0_2_0 and bExprlevel_0_3_0) else (if (level_1_hole_0_6 = 19) then (bExprlevel_0_1_0 or bExprlevel_0_2_0) else (if (level_1_hole_0_6 = 20) then (bExprlevel_0_1_0 or bExprlevel_0_3_0) else (if (level_1_hole_0_6 = 22) then (bExprlevel_0_2_0 or bExprlevel_0_3_0) else (if (level_1_hole_0_6 = 29) then (bExprlevel_0_1_0 xor bExprlevel_0_2_0) else (if (level_1_hole_0_6 = 30) then (bExprlevel_0_1_0 xor bExprlevel_0_3_0) else (if (level_1_hole_0_6 = 32) then (bExprlevel_0_2_0 xor bExprlevel_0_3_0) else (if (level_1_hole_0_6 = 35) then (bExprlevel_0_1_0 => bExprlevel_0_2_0) else (if (level_1_hole_0_6 = 36) then (bExprlevel_0_1_0 => bExprlevel_0_3_0) else (bExprlevel_0_2_0 => bExprlevel_0_3_0)))))))))))))));

  bExprlevel_2 = (if (level_2_hole_7 = 0) then bExprlevel_1_0 else (if (level_2_hole_7 = 1) then (not bExprlevel_1_0) else (if (level_2_hole_7 = 2) then (bExprlevel_1_0 and bExprlevel_0_1_0) else (if (level_2_hole_7 = 3) then (bExprlevel_1_0 and bExprlevel_0_2_0) else (if (level_2_hole_7 = 4) then (bExprlevel_1_0 and bExprlevel_0_3_0) else (if (level_2_hole_7 = 5) then (bExprlevel_1_0 or bExprlevel_0_1_0) else (if (level_2_hole_7 = 6) then (bExprlevel_1_0 or bExprlevel_0_2_0) else (if (level_2_hole_7 = 7) then (bExprlevel_1_0 or bExprlevel_0_3_0) else (if (level_2_hole_7 = 8) then (bExprlevel_1_0 => bExprlevel_0_1_0) else (if (level_2_hole_7 = 9) then (bExprlevel_1_0 => bExprlevel_0_2_0) else (if (level_2_hole_7 = 10) then (bExprlevel_1_0 => bExprlevel_0_3_0) else (if (level_2_hole_7 = 11) then true else false))))))))))));

  out = bExprlevel_2;

tel;

node H_discovery(
  in : bool
) returns (
  out : bool
);
let
  out = (in -> (in and (pre out)));

tel;

node Check_spec(
  pedal_r : int;
  autoBreak_r : bool;
  skid_r : bool;
  NormalPressure_r : int;
  AltPressure_r : int;
  Sys_Mode : int;
  valhole_0_0 : int;
  valhole_1_1 : int;
  valhole_2_2 : int;
  const_hole0_3 : int;
  const_hole1_4 : int;
  const_hole2_5 : int;
  level_1_hole_0_6 : int;
  level_2_hole_7 : int;
  k : int
) returns (
  p1 : bool
);
var
  step : int;
  stepOK : bool;
let
  step = (0 -> (1 + (pre step)));

  stepOK = (if (step <= k) then T_node(pedal_r, autoBreak_r, skid_r, NormalPressure_r, AltPressure_r, Sys_Mode, valhole_0_0, valhole_1_1, valhole_2_2, const_hole0_3, const_hole1_4, const_hole2_5, level_1_hole_0_6, level_2_hole_7) else true);

  p1 = ((step >= k) and H_discovery(stepOK));

tel;

node main(
  pedal_r : int;
  autoBreak_r : bool;
  skid_r : bool;
  NormalPressure_r : int;
  AltPressure_r : int;
  Sys_Mode : int;
  valhole_0_0 : int;
  valhole_1_1 : int;
  valhole_2_2 : int;
  const_hole0_3 : int;
  const_hole1_4 : int;
  const_hole2_5 : int;
  level_1_hole_0_6 : int;
  level_2_hole_7 : int
) returns (
  fail : bool
);
var
  ok_0 : bool;
  ok_1 : bool;
  ok_2 : bool;
  ok_3 : bool;
  ok_4 : bool;
  pedal_r0 : int;
  autoBreak_r0 : bool;
  skid_r0 : bool;
  out_00 : int;
  out_10 : int;
  out_20 : int;
  pedal_r1 : int;
  autoBreak_r1 : bool;
  skid_r1 : bool;
  out_01 : int;
  out_11 : int;
  out_21 : int;
  pedal_r2 : int;
  autoBreak_r2 : bool;
  skid_r2 : bool;
  out_02 : int;
  out_12 : int;
  out_22 : int;
  pedal_r3 : int;
  autoBreak_r3 : bool;
  skid_r3 : bool;
  NormalPressure_r3 : int;
  AltPressure_r3 : int;
  Sys_Mode3 : int;
  pedal_r4 : int;
  autoBreak_r4 : bool;
  skid_r4 : bool;
  NormalPressure_r4 : int;
  AltPressure_r4 : int;
  Sys_Mode4 : int;
  fixedRout : bool;
  rPrimeOut : bool;
let
  --%MAIN;
  pedal_r0 = (1 -> (pre 4));

  autoBreak_r0 = (false -> (pre false));

  skid_r0 = (false -> (pre false));

  out_00 = (0 -> (pre 5));

  out_10 = (0 -> (pre 0));

  out_20 = (0 -> (pre 0));

  pedal_r1 = (3 -> (pre 1));

  autoBreak_r1 = (false -> (pre true));

  skid_r1 = (true -> (pre false));

  out_01 = (0 -> (pre 2));

  out_11 = (0 -> (pre 0));

  out_21 = (0 -> (pre 0));

  pedal_r2 = (8 -> (pre 1));

  autoBreak_r2 = (false -> (pre false));

  skid_r2 = (false -> (pre false));

  out_02 = (0 -> (pre 1));

  out_12 = (0 -> (pre 0));

  out_22 = (0 -> (pre 0));

  pedal_r3 = (3 -> (pre 2));

  autoBreak_r3 = (false -> (pre false));

  skid_r3 = (false -> (pre false));

  NormalPressure_r3 = (6 -> (pre 7));

  AltPressure_r3 = (10 -> (pre 9));

  Sys_Mode3 = (8 -> (pre 1));

  pedal_r4 = (1 -> (pre 1));

  autoBreak_r4 = (false -> (pre false));

  skid_r4 = (false -> (pre false));

  NormalPressure_r4 = (6 -> (pre 0));

  AltPressure_r4 = (9 -> (pre 8));

  Sys_Mode4 = (7 -> (pre 10));

  ok_0 = Check_spec(pedal_r0, autoBreak_r0, skid_r0, out_00, out_10, out_20, valhole_0_0, valhole_1_1, valhole_2_2, const_hole0_3, const_hole1_4, const_hole2_5, level_1_hole_0_6, level_2_hole_7, 1);

  ok_1 = Check_spec(pedal_r1, autoBreak_r1, skid_r1, out_01, out_11, out_21, valhole_0_0, valhole_1_1, valhole_2_2, const_hole0_3, const_hole1_4, const_hole2_5, level_1_hole_0_6, level_2_hole_7, 1);

  ok_2 = Check_spec(pedal_r2, autoBreak_r2, skid_r2, out_02, out_12, out_22, valhole_0_0, valhole_1_1, valhole_2_2, const_hole0_3, const_hole1_4, const_hole2_5, level_1_hole_0_6, level_2_hole_7, 1);

  ok_3 = Check_spec(pedal_r3, autoBreak_r3, skid_r3, NormalPressure_r3, AltPressure_r3, Sys_Mode3, valhole_0_0, valhole_1_1, valhole_2_2, const_hole0_3, const_hole1_4, const_hole2_5, level_1_hole_0_6, level_2_hole_7, 1);

  ok_4 = Check_spec(pedal_r4, autoBreak_r4, skid_r4, NormalPressure_r4, AltPressure_r4, Sys_Mode4, valhole_0_0, valhole_1_1, valhole_2_2, const_hole0_3, const_hole1_4, const_hole2_5, level_1_hole_0_6, level_2_hole_7, 1);

  fail = (not ((not ok_4) and ((not ok_3) and (ok_2 and ((ok_0 and ok_1) and (fixedRout and (not rPrimeOut)))))));

  fixedRout = Fixed_T(pedal_r, autoBreak_r, skid_r, NormalPressure_r, AltPressure_r, Sys_Mode);

  rPrimeOut = T_node(pedal_r, autoBreak_r, skid_r, NormalPressure_r, AltPressure_r, Sys_Mode, valhole_0_0, valhole_1_1, valhole_2_2, const_hole0_3, const_hole1_4, const_hole2_5, level_1_hole_0_6, level_2_hole_7);

  assert (true -> (valhole_0_0 = (pre valhole_0_0)));

  assert (true -> (valhole_1_1 = (pre valhole_1_1)));

  assert (true -> (valhole_2_2 = (pre valhole_2_2)));

  assert (true -> (const_hole0_3 = (pre const_hole0_3)));

  assert (true -> (const_hole1_4 = (pre const_hole1_4)));

  assert (true -> (const_hole2_5 = (pre const_hole2_5)));

  assert (true -> (level_1_hole_0_6 = (pre level_1_hole_0_6)));

  assert (true -> (level_2_hole_7 = (pre level_2_hole_7)));

  --%PROPERTY fail;

tel;

node Fixed_T(
  pedal_r : int;
  autoBreak_r : bool;
  skid_r : bool;
  NormalPressure_r : int;
  AltPressure_r : int;
  Sys_Mode : int
) returns (
  p1 : bool
);
let
  p1 = (true -> ((((pedal_r > 0) and (pedal_r <= 4)) and (not skid_r)) => ((skid_r or (NormalPressure_r = 5)) or (Sys_Mode = 0))));

tel;
