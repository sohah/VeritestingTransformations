node T_node(
  pedal_r : int;
  autoBreak_r : bool;
  skid_r : bool;
  NormalPressure_r : int;
  AltPressure_r : int;
  Sys_Mode : int;
  valhole_0_0 : int;
  valhole_1_1 : int;
  valhole_2_2 : int;
  valhole_3_3 : int;
  valhole_4_4 : int;
  valhole_5_5 : int;
  valhole_6_6 : int;
  valhole_7_7 : int;
  const_hole0_8 : int;
  const_hole1_9 : int;
  const_hole2_10 : int;
  const_hole3_11 : int;
  const_hole4_12 : int;
  const_hole5_13 : int;
  const_hole6_14 : int;
  const_hole7_15 : int;
  level_1_hole_0_16 : int;
  level_1_hole_1_17 : int;
  level_2_hole_18 : int
) returns (
  p1 : bool
);
let
  p1 = (true -> discover_binary_Bool_1_Int_3_0(skid_r, pedal_r, NormalPressure_r, Sys_Mode, valhole_0_0, valhole_1_1, valhole_2_2, valhole_3_3, valhole_4_4, valhole_5_5, valhole_6_6, valhole_7_7, const_hole0_8, const_hole1_9, const_hole2_10, const_hole3_11, const_hole4_12, const_hole5_13, const_hole6_14, const_hole7_15, level_1_hole_0_16, level_1_hole_1_17, level_2_hole_18));

tel;

node discover_binary_Bool_1_Int_3_0(
  a0 : bool;
  i0 : int;
  i1 : int;
  i2 : int;
  valhole_0_0 : int;
  valhole_1_1 : int;
  valhole_2_2 : int;
  valhole_3_3 : int;
  valhole_4_4 : int;
  valhole_5_5 : int;
  valhole_6_6 : int;
  valhole_7_7 : int;
  const_hole0_8 : int;
  const_hole1_9 : int;
  const_hole2_10 : int;
  const_hole3_11 : int;
  const_hole4_12 : int;
  const_hole5_13 : int;
  const_hole6_14 : int;
  const_hole7_15 : int;
  level_1_hole_0_16 : int;
  level_1_hole_1_17 : int;
  level_2_hole_18 : int
) returns (
  out : bool
);
var
  bExprlevel_0_1_0 : bool;
  bExprlevel_0_2_0 : bool;
  bExprlevel_0_3_0 : bool;
  bExprlevel_0_1_1 : bool;
  bExprlevel_0_2_1 : bool;
  bExprlevel_0_3_1 : bool;
  bExprlevel_1_0 : bool;
  bExprlevel_1_1 : bool;
  bExprlevel_2 : bool;
let
  bExprlevel_0_1_0 = (if (valhole_0_0 = 0) then true else (if (valhole_0_0 = 1) then false else (if (valhole_0_0 = 2) then a0 else (if (valhole_0_0 = 3) then (i0 <= const_hole0_8) else (if (valhole_0_0 = 4) then (i0 > const_hole0_8) else (i0 = const_hole0_8))))));

  bExprlevel_0_2_0 = (if (valhole_1_1 = 0) then true else (if (valhole_1_1 = 1) then false else (if (valhole_1_1 = 2) then a0 else (if (valhole_1_1 = 3) then (i1 <= const_hole1_9) else (if (valhole_1_1 = 4) then (i1 > const_hole1_9) else (i1 = const_hole1_9))))));

  bExprlevel_0_3_0 = (if (valhole_2_2 = 0) then true else (if (valhole_2_2 = 1) then false else (if (valhole_2_2 = 2) then a0 else (if (valhole_2_2 = 3) then (i2 <= const_hole2_10) else (if (valhole_2_2 = 4) then (i2 > const_hole2_10) else (i2 = const_hole2_10))))));

  bExprlevel_1_0 = (if (level_1_hole_0_16 = 1) then bExprlevel_0_1_0 else (if (level_1_hole_0_16 = 2) then bExprlevel_0_2_0 else (if (level_1_hole_0_16 = 3) then bExprlevel_0_3_0 else (if (level_1_hole_0_16 = 5) then (not bExprlevel_0_1_0) else (if (level_1_hole_0_16 = 6) then (not bExprlevel_0_2_0) else (if (level_1_hole_0_16 = 7) then (not bExprlevel_0_3_0) else (if (level_1_hole_0_16 = 9) then (bExprlevel_0_1_0 and bExprlevel_0_2_0) else (if (level_1_hole_0_16 = 10) then (bExprlevel_0_1_0 and bExprlevel_0_3_0) else (if (level_1_hole_0_16 = 12) then (bExprlevel_0_2_0 and bExprlevel_0_3_0) else (if (level_1_hole_0_16 = 19) then (bExprlevel_0_1_0 or bExprlevel_0_2_0) else (if (level_1_hole_0_16 = 20) then (bExprlevel_0_1_0 or bExprlevel_0_3_0) else (if (level_1_hole_0_16 = 22) then (bExprlevel_0_2_0 or bExprlevel_0_3_0) else (if (level_1_hole_0_16 = 29) then (bExprlevel_0_1_0 xor bExprlevel_0_2_0) else (if (level_1_hole_0_16 = 30) then (bExprlevel_0_1_0 xor bExprlevel_0_3_0) else (if (level_1_hole_0_16 = 32) then (bExprlevel_0_2_0 xor bExprlevel_0_3_0) else (if (level_1_hole_0_16 = 35) then (bExprlevel_0_1_0 => bExprlevel_0_2_0) else (if (level_1_hole_0_16 = 36) then (bExprlevel_0_1_0 => bExprlevel_0_3_0) else (bExprlevel_0_2_0 => bExprlevel_0_3_0))))))))))))))))));

  bExprlevel_0_1_1 = (if (valhole_4_4 = 0) then true else (if (valhole_4_4 = 1) then false else (if (valhole_4_4 = 2) then a0 else (if (valhole_4_4 = 3) then (i0 <= const_hole4_12) else (if (valhole_4_4 = 4) then (i0 > const_hole4_12) else (i0 = const_hole4_12))))));

  bExprlevel_0_2_1 = (if (valhole_5_5 = 0) then true else (if (valhole_5_5 = 1) then false else (if (valhole_5_5 = 2) then a0 else (if (valhole_5_5 = 3) then (i1 <= const_hole5_13) else (if (valhole_5_5 = 4) then (i1 > const_hole5_13) else (i1 = const_hole5_13))))));

  bExprlevel_0_3_1 = (if (valhole_6_6 = 0) then true else (if (valhole_6_6 = 1) then false else (if (valhole_6_6 = 2) then a0 else (if (valhole_6_6 = 3) then (i2 <= const_hole6_14) else (if (valhole_6_6 = 4) then (i2 > const_hole6_14) else (i2 = const_hole6_14))))));

  bExprlevel_1_1 = (if (level_1_hole_1_17 = 1) then bExprlevel_0_1_1 else (if (level_1_hole_1_17 = 2) then bExprlevel_0_2_1 else (if (level_1_hole_1_17 = 3) then bExprlevel_0_3_1 else (if (level_1_hole_1_17 = 5) then (not bExprlevel_0_1_1) else (if (level_1_hole_1_17 = 6) then (not bExprlevel_0_2_1) else (if (level_1_hole_1_17 = 7) then (not bExprlevel_0_3_1) else (if (level_1_hole_1_17 = 9) then (bExprlevel_0_1_1 and bExprlevel_0_2_1) else (if (level_1_hole_1_17 = 10) then (bExprlevel_0_1_1 and bExprlevel_0_3_1) else (if (level_1_hole_1_17 = 12) then (bExprlevel_0_2_1 and bExprlevel_0_3_1) else (if (level_1_hole_1_17 = 19) then (bExprlevel_0_1_1 or bExprlevel_0_2_1) else (if (level_1_hole_1_17 = 20) then (bExprlevel_0_1_1 or bExprlevel_0_3_1) else (if (level_1_hole_1_17 = 22) then (bExprlevel_0_2_1 or bExprlevel_0_3_1) else (if (level_1_hole_1_17 = 29) then (bExprlevel_0_1_1 xor bExprlevel_0_2_1) else (if (level_1_hole_1_17 = 30) then (bExprlevel_0_1_1 xor bExprlevel_0_3_1) else (bExprlevel_0_2_1 xor bExprlevel_0_3_1)))))))))))))));

  bExprlevel_2 = (if (level_2_hole_18 = 0) then bExprlevel_1_0 else (if (level_2_hole_18 = 1) then bExprlevel_1_1 else (if (level_2_hole_18 = 1) then (not bExprlevel_1_0) else (if (level_2_hole_18 = 1) then (not bExprlevel_1_1) else (if (level_2_hole_18 = 1) then (bExprlevel_1_0 and bExprlevel_1_1) else (if (level_2_hole_18 = 2) then (bExprlevel_1_0 or bExprlevel_1_1) else (if (level_2_hole_18 = 2) then (bExprlevel_1_0 xor bExprlevel_1_1) else (bExprlevel_1_0 => bExprlevel_1_1))))))));

  out = bExprlevel_2;

tel;

node H_discovery(
  in : bool
) returns (
  out : bool
);
let
  out = (in -> (in and (pre out)));

tel;

node Check_spec(
  pedal_r : int;
  autoBreak_r : bool;
  skid_r : bool;
  NormalPressure_r : int;
  AltPressure_r : int;
  Sys_Mode : int;
  valhole_0_0 : int;
  valhole_1_1 : int;
  valhole_2_2 : int;
  valhole_3_3 : int;
  valhole_4_4 : int;
  valhole_5_5 : int;
  valhole_6_6 : int;
  valhole_7_7 : int;
  const_hole0_8 : int;
  const_hole1_9 : int;
  const_hole2_10 : int;
  const_hole3_11 : int;
  const_hole4_12 : int;
  const_hole5_13 : int;
  const_hole6_14 : int;
  const_hole7_15 : int;
  level_1_hole_0_16 : int;
  level_1_hole_1_17 : int;
  level_2_hole_18 : int;
  k : int
) returns (
  p1 : bool
);
var
  step : int;
  stepOK : bool;
let
  step = (0 -> (1 + (pre step)));

  stepOK = (if (step <= k) then T_node(pedal_r, autoBreak_r, skid_r, NormalPressure_r, AltPressure_r, Sys_Mode, valhole_0_0, valhole_1_1, valhole_2_2, valhole_3_3, valhole_4_4, valhole_5_5, valhole_6_6, valhole_7_7, const_hole0_8, const_hole1_9, const_hole2_10, const_hole3_11, const_hole4_12, const_hole5_13, const_hole6_14, const_hole7_15, level_1_hole_0_16, level_1_hole_1_17, level_2_hole_18) else true);

  p1 = ((step >= k) and H_discovery(stepOK));

tel;

node Fixed_T(
  pedal_r : int;
  autoBreak_r : bool;
  skid_r : bool;
  NormalPressure_r : int;
  AltPressure_r : int;
  Sys_Mode : int
) returns (
  p1 : bool
);
let
  p1 = (true -> ((NormalPressure_r = 1) or true));

tel;

node main(
  pedal_r : int;
  autoBreak_r : bool;
  skid_r : bool;
  NormalPressure_r : int;
  AltPressure_r : int;
  Sys_Mode : int;
  valhole_0_0 : int;
  valhole_1_1 : int;
  valhole_2_2 : int;
  valhole_3_3 : int;
  valhole_4_4 : int;
  valhole_5_5 : int;
  valhole_6_6 : int;
  valhole_7_7 : int;
  const_hole0_8 : int;
  const_hole1_9 : int;
  const_hole2_10 : int;
  const_hole3_11 : int;
  const_hole4_12 : int;
  const_hole5_13 : int;
  const_hole6_14 : int;
  const_hole7_15 : int;
  level_1_hole_0_16 : int;
  level_1_hole_1_17 : int;
  level_2_hole_18 : int
) returns (
  fail : bool
);
var
  pedal_r0 : int;
  autoBreak_r0 : bool;
  skid_r0 : bool;
  out_00 : int;
  out_10 : int;
  out_20 : int;
  ok_0 : bool;
  fixedRout : bool;
  rPrimeOut : bool;
let
  --%MAIN;
  pedal_r0 = (4 -> (pre 0));

  autoBreak_r0 = (false -> (pre true));

  skid_r0 = (false -> (pre false));

  out_00 = (0 -> (pre 1));

  out_10 = (0 -> (pre 0));

  out_20 = (0 -> (pre 0));

  ok_0 = Check_spec(pedal_r0, autoBreak_r0, skid_r0, out_00, out_10, out_20, valhole_0_0, valhole_1_1, valhole_2_2, valhole_3_3, valhole_4_4, valhole_5_5, valhole_6_6, valhole_7_7, const_hole0_8, const_hole1_9, const_hole2_10, const_hole3_11, const_hole4_12, const_hole5_13, const_hole6_14, const_hole7_15, level_1_hole_0_16, level_1_hole_1_17, level_2_hole_18, 1);

  fixedRout = Fixed_T(pedal_r, autoBreak_r, skid_r, NormalPressure_r, AltPressure_r, Sys_Mode);

  rPrimeOut = Check_spec(pedal_r, autoBreak_r, skid_r, NormalPressure_r, AltPressure_r, Sys_Mode, valhole_0_0, valhole_1_1, valhole_2_2, valhole_3_3, valhole_4_4, valhole_5_5, valhole_6_6, valhole_7_7, const_hole0_8, const_hole1_9, const_hole2_10, const_hole3_11, const_hole4_12, const_hole5_13, const_hole6_14, const_hole7_15, level_1_hole_0_16, level_1_hole_1_17, level_2_hole_18, 1);

  fail = (not (ok_0 and (fixedRout and (not rPrimeOut))));

  assert (true -> (valhole_0_0 = (pre valhole_0_0)));

  assert (true -> (valhole_1_1 = (pre valhole_1_1)));

  assert (true -> (valhole_2_2 = (pre valhole_2_2)));

  assert (true -> (valhole_3_3 = (pre valhole_3_3)));

  assert (true -> (valhole_4_4 = (pre valhole_4_4)));

  assert (true -> (valhole_5_5 = (pre valhole_5_5)));

  assert (true -> (valhole_6_6 = (pre valhole_6_6)));

  assert (true -> (valhole_7_7 = (pre valhole_7_7)));

  assert (true -> (const_hole0_8 = (pre const_hole0_8)));

  assert (true -> (const_hole1_9 = (pre const_hole1_9)));

  assert (true -> (const_hole2_10 = (pre const_hole2_10)));

  assert (true -> (const_hole3_11 = (pre const_hole3_11)));

  assert (true -> (const_hole4_12 = (pre const_hole4_12)));

  assert (true -> (const_hole5_13 = (pre const_hole5_13)));

  assert (true -> (const_hole6_14 = (pre const_hole6_14)));

  assert (true -> (const_hole7_15 = (pre const_hole7_15)));

  assert (true -> (level_1_hole_0_16 = (pre level_1_hole_0_16)));

  assert (true -> (level_1_hole_1_17 = (pre level_1_hole_1_17)));

  assert (true -> (level_2_hole_18 = (pre level_2_hole_18)));

  --%PROPERTY fail;

tel;
