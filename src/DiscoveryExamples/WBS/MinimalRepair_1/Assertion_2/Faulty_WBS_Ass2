-- RESULT : Great!! Minimal repair was found at, outer loop # = 4 minimal repair loop # = 3 the LAST candidate repair loop # = 2

-- Tried 49 minimal/tight Candidate

-- INITIAL PROPERTY:  p1 = (true -> true);
-- TIGHT 1: p1 = (true -> (((NormalPressure_r = 5) or (Sys_Mode = 0)) or ((NormalPressure_r = -9) and skid_r)));
-- TIGHT 2: p1 = (true -> ((NormalPressure_r <= 5) and (Sys_Mode = 0)));
-- TIGHT 3: p1 = (true -> (((NormalPressure_r <= 5) and (Sys_Mode = 0)) and ((pedal_r > 9) or (NormalPressure_r > -3))
));
-- TIGHT 4: p1 = (true -> (((NormalPressure_r <= 5) xor (Sys_Mode > 11)) and ((NormalPressure_r > -1) and (Sys_Mode = 0))));


repair node discover_binary_Bool_1_Int_3(a0: bool; i0:int; i1:int; i2:int) [valhole_0: inthole; valhole_1:
inthole;
valhole_2: inthole;
valhole_3: inthole;
valhole_4: inthole;
valhole_5: inthole;
valhole_6: inthole;
valhole_7: inthole;

const_hole0: inthole;
const_hole1 : inthole;
const_hole2 :inthole;
const_hole3: inthole;

const_hole4: inthole;
const_hole5 : inthole;
const_hole6 :inthole;
const_hole7: inthole;

level_1_hole_0:inthole;
level_1_hole_1:inthole;

level_2_hole:inthole
]

returns (out: bool);
var

bExprlevel_0_1_0:bool;
bExprlevel_0_2_0:bool;
bExprlevel_0_3_0:bool;


bExprlevel_0_1_1:bool;
bExprlevel_0_2_1:bool;
bExprlevel_0_3_1:bool;


bExprlevel_1_0:bool;
bExprlevel_1_1:bool;
bExprlevel_2:bool;


let

    bExprlevel_0_1_0 = if(valhole_0 = 2) then a0
                   else if(valhole_0 = 3) then i0 <= const_hole0
                   else if(valhole_0 = 4) then i0 > const_hole0
                   else i0 = const_hole0;

    bExprlevel_0_2_0 = if(valhole_1 = 2) then a0
                   else if(valhole_1 = 3) then i1 <= const_hole1
                   else if(valhole_1 = 4) then i1 > const_hole1
                   else i1 = const_hole1;

    bExprlevel_0_3_0 = if(valhole_2 = 2) then a0
                   else if(valhole_2 = 3) then i2 <= const_hole2
                   else if(valhole_2 = 4) then i2 > const_hole2
                   else i2 = const_hole2;


    bExprlevel_1_0 = if(level_1_hole_0 = 1) then bExprlevel_0_1_0
                   else if(level_1_hole_0 = 2) then bExprlevel_0_2_0
                   else if(level_1_hole_0 = 3) then bExprlevel_0_3_0

--                   else if(level_1_hole_0 = 5) then not bExprlevel_0_1_0
--                   else if(level_1_hole_0 = 6) then not bExprlevel_0_2_0
--                   else if(level_1_hole_0 = 7) then not bExprlevel_0_3_0

                   else if(level_1_hole_0 = 9) then bExprlevel_0_1_0 and bExprlevel_0_2_0
                   else if(level_1_hole_0 = 10) then bExprlevel_0_1_0 and bExprlevel_0_3_0

                   else if(level_1_hole_0 = 12) then bExprlevel_0_2_0 and bExprlevel_0_3_0

                   else if(level_1_hole_0 = 19) then bExprlevel_0_1_0 or bExprlevel_0_2_0
                   else if(level_1_hole_0 = 20) then bExprlevel_0_1_0 or bExprlevel_0_3_0

                   else if(level_1_hole_0 = 22) then bExprlevel_0_2_0 or bExprlevel_0_3_0

                   else if(level_1_hole_0 = 29) then bExprlevel_0_1_0 xor bExprlevel_0_2_0
                   else if(level_1_hole_0 = 30) then bExprlevel_0_1_0 xor bExprlevel_0_3_0

                   else if(level_1_hole_0 = 32) then bExprlevel_0_2_0 xor bExprlevel_0_3_0

                   else if(level_1_hole_0 = 35) then bExprlevel_0_1_0 => bExprlevel_0_2_0
                   else if(level_1_hole_0 = 36) then bExprlevel_0_1_0 => bExprlevel_0_3_0

                   else bExprlevel_0_2_0 => bExprlevel_0_3_0;


    bExprlevel_0_1_1 = if(valhole_4 = 2) then a0
                   else if(valhole_4 = 3) then i0 <= const_hole4
                   else if(valhole_4 = 4) then i0 > const_hole4
                   else i0 = const_hole4;


    bExprlevel_0_2_1 = if(valhole_5 = 2) then a0
                   else if(valhole_5 = 3) then i1 <= const_hole5
                   else if(valhole_5 = 4) then i1 > const_hole5
                   else i1 = const_hole5;


    bExprlevel_0_3_1 = if(valhole_6 = 2) then a0
                   else if(valhole_6 = 3) then i2 <= const_hole6
                   else if(valhole_6 = 4) then i2 > const_hole6
                   else i2 = const_hole6;



    bExprlevel_1_1 = if(level_1_hole_1 = 1) then bExprlevel_0_1_1
                   else if(level_1_hole_1 = 2) then bExprlevel_0_2_1
                   else if(level_1_hole_1 = 3) then bExprlevel_0_3_1

--                   else if(level_1_hole_1 = 5) then not bExprlevel_0_1_1
--                   else if(level_1_hole_1 = 6) then not bExprlevel_0_2_1
--                   else if(level_1_hole_1 = 7) then not bExprlevel_0_3_1

                   else if(level_1_hole_1 = 9) then bExprlevel_0_1_1 and bExprlevel_0_2_1
                   else if(level_1_hole_1 = 10) then bExprlevel_0_1_1 and bExprlevel_0_3_1

                   else if(level_1_hole_1 = 12) then bExprlevel_0_2_1 and bExprlevel_0_3_1

                   else if(level_1_hole_1 = 19) then bExprlevel_0_1_1 or bExprlevel_0_2_1
                   else if(level_1_hole_1 = 20) then bExprlevel_0_1_1 or bExprlevel_0_3_1

                   else if(level_1_hole_1 = 22) then bExprlevel_0_2_1 or bExprlevel_0_3_1

                   else if(level_1_hole_1 = 29) then bExprlevel_0_1_1 xor bExprlevel_0_2_1
                   else if(level_1_hole_1 = 30) then bExprlevel_0_1_1 xor bExprlevel_0_3_1

                   else bExprlevel_0_2_1 xor bExprlevel_0_3_1;



    bExprlevel_2 = if(level_2_hole = 0) then bExprlevel_1_0
                   else if(level_2_hole = 1) then bExprlevel_1_1
                   else if(level_2_hole = 2) then not bExprlevel_1_0
                   else if(level_2_hole = 3) then not bExprlevel_1_1
                   else if(level_2_hole = 4) then bExprlevel_1_0 and bExprlevel_1_1
                   else if(level_2_hole = 5) then bExprlevel_1_0 or bExprlevel_1_1
                   else if(level_2_hole = 6) then bExprlevel_1_0 xor bExprlevel_1_1
                   else if(level_2_hole = 7) then bExprlevel_1_0 => bExprlevel_1_1
                   else if(level_2_hole = 8) then true
                   else false;


    out = bExprlevel_2;
tel;


node main(pedal_r: int; autoBreak_r: bool; skid_r: bool; NormalPressure_r:int; AltPressure_r:int; Sys_Mode: int) returns (p1: bool);


let

-- repairing failing property #2 in WBS.
    p1 = true -> repair((pedal_r > 0 and pedal_r <= 4 and not skid_r) => (AltPressure_r > 0),
    discover_binary_Bool_1_Int_3
    (skid_r, pedal_r, NormalPressure_r, Sys_Mode)) ;

      --%PROPERTY p1;

tel;
