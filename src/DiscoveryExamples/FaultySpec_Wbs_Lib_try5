-- lets get rid of implication.

repair node discover_binary_Bool_0_Int_4(i0:int; i1:int; i2:int;i3:int) [valhole_0: inthole; valhole_1: inthole;
valhole_2: inthole;
valhole_3: inthole;
valhole_4: inthole;
const_hole0: inthole;
const_hole1 : inthole;
const_hole2 :inthole;
const_hole3: inthole;
level_1_hole:inthole;
level_2_hole:inthole; level_3_hole : inthole]
returns (out: bool);
var

bExprlevel_0_1:bool;
bExprlevel_0_2:bool;
bExprlevel_0_3:bool;
bExprlevel_0_4:bool;

bExprlevel_1:bool;
bExprlevel_2:bool;
bExprlevel_3:bool;


let

    bExprlevel_0_1 = if(valhole_0 = 0) then i0 <= const_hole0
                   else if(valhole_0 = 1) then i0 > const_hole0
                   else i0 = const_hole0;

    bExprlevel_0_2 = if(valhole_1 = 0) then i1 <= const_hole1
                   else if(valhole_1 = 1) then i1 > const_hole1
                   else i1 = const_hole1;

    bExprlevel_0_3 =  if(valhole_2 = 0) then i2 <= const_hole2
                   else if(valhole_2 = 1) then i2 > const_hole2
                   else i2 = const_hole2;

    bExprlevel_0_4 =  if(valhole_3 = 0) then i3 <= const_hole3
                   else if(valhole_3 = 1) then i3 > const_hole3
                   else i3 = const_hole3;


    bExprlevel_1 = if(level_1_hole = 1) then not bExprlevel_0_1
                   else if(level_1_hole = 2) then not bExprlevel_0_2
                   else if(level_1_hole = 3) then not bExprlevel_0_3
                   else if(level_1_hole = 4) then not bExprlevel_0_4
                   
                   else if(level_1_hole = 9) then bExprlevel_0_1 and bExprlevel_0_2
                   else if(level_1_hole = 10) then bExprlevel_0_1 and bExprlevel_0_3
                   else if(level_1_hole = 11) then bExprlevel_0_1 and bExprlevel_0_4

                   else if(level_1_hole = 12) then bExprlevel_0_2 and bExprlevel_0_3
                   else if(level_1_hole = 13) then bExprlevel_0_2 and bExprlevel_0_4

                   else if(level_1_hole = 14) then bExprlevel_0_3 and bExprlevel_0_4

                   else if(level_1_hole = 19) then bExprlevel_0_1 or bExprlevel_0_2
                   else if(level_1_hole = 20) then bExprlevel_0_1 or bExprlevel_0_3
                   else if(level_1_hole = 21) then bExprlevel_0_1 or bExprlevel_0_4

                   else if(level_1_hole = 22) then bExprlevel_0_2 or bExprlevel_0_3
                   else if(level_1_hole = 23) then bExprlevel_0_2 or bExprlevel_0_4

                   else if(level_1_hole = 24) then bExprlevel_0_3 or bExprlevel_0_4

                   else if(level_1_hole = 29) then bExprlevel_0_1 xor bExprlevel_0_2
                   else if(level_1_hole = 30) then bExprlevel_0_1 xor bExprlevel_0_3
                   else if(level_1_hole = 31) then bExprlevel_0_1 xor bExprlevel_0_4

                   else if(level_1_hole = 32) then bExprlevel_0_2 xor bExprlevel_0_3
                   else if(level_1_hole = 33) then bExprlevel_0_2 xor bExprlevel_0_4

                   else bExprlevel_0_3 xor bExprlevel_0_4;



    bExprlevel_2 = if(level_2_hole = 0) then not bExprlevel_1
                   else if(level_2_hole = 1) then bExprlevel_1 and bExprlevel_1
                   else if(level_2_hole = 2) then bExprlevel_1 or bExprlevel_1
                   else bExprlevel_1 xor bExprlevel_1;



    bExprlevel_3 = if(level_3_hole = 0) then not bExprlevel_2
                   else if(level_3_hole = 1) then bExprlevel_2 and bExprlevel_2
                   else if(level_3_hole = 2) then bExprlevel_2 or bExprlevel_2
                   else bExprlevel_2 xor bExprlevel_2;


    out = bExprlevel_3;
tel;


node main(pedal_r: int; autoBreak_r: bool; skid_r: bool; NormalPressure_r:int; AltPressure_r:int; Sys_Mode: int) returns (p1: bool);


let

    p1 = true -> skid_r => repair(false,
        discover_binary_Bool_0_Int_4(pedal_r, AltPressure_r, NormalPressure_r, Sys_Mode)) ;

  --%PROPERTY p1;

tel;
