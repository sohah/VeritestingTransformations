const	START_SIG = 0;
const LAUNCH_SIG = 1;

	-- the Y operator for yesterday which is the dual of the X operator:
	node Y(in: bool) returns (out: bool); let out = false -> pre in; tel;

	-- the Z operator which is the same as Y except for being true at initial step:
	node Z(in: bool) returns (out: bool); let out = true -> pre in; tel;

	-- the H operator for history which is the dual of the G operator:
	node H(in: bool) returns (out: bool); let out = in -> (in and pre out); tel;

	-- the O operator for once which is the dual of the F operator:
	node O(in: bool) returns (out: bool);	let out = in -> (in or pre out); tel;

	-- the S operator for since which is the dual of the U operator:
	node S(p, q: bool) returns (out: bool);	let out = q or (false -> (p and pre out)); tel;

node main(sig: int; ignition: bool) returns (ok: bool);

var
	start_bt: bool;
	launch_bt: bool;
    reset_flag: bool;
	--ignition: bool;
	p1: bool;

let
	start_bt = false -> if(reset_flag) then
															false
													else if(not(pre start_bt) and (not (pre launch_bt))) and (sig = START_SIG) then
																true
															else
																pre start_bt;


	launch_bt = false -> if(reset_flag) then
														false
													else if((pre start_bt) and (not (pre launch_bt ))) and (sig = LAUNCH_SIG) then
																true
															else
															 pre launch_bt;


  reset_flag = false -> pre ignition;

   --ignition = false -> pre (launch_bt) and (pre reset_flag);

  p1 = (ignition = Y(launch_bt) and Y (start_bt));

  --%PROPERTY ok;

  ok = true -> p1;

tel;
